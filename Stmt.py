"""
This code provides the classes for the AST expressions
It is autogenerated from tools/GenerateAst.py
"""

from typing import Any, List
from Token import Token
import Expr

class Stmt:
    pass

class Block(Stmt):
    def __init__(self, statements: List[Stmt]):
        self.statements = statements

    def accept(self, visitor: Any) -> Any:
        return visitor.visitBlockStmt(self)

class Expression(Stmt):
    def __init__(self, expression: Expr.Expr):
        self.expression = expression

    def accept(self, visitor: Any) -> Any:
        return visitor.visitExpressionStmt(self)

class Function(Stmt):
    def __init__(self, name: Token, params: List[Token], body: List[Stmt]):
        self.name = name
        self.params = params
        self.body = body

    def accept(self, visitor: Any) -> Any:
        return visitor.visitFunctionStmt(self)

class If(Stmt):
    def __init__(self, condition: Expr.Expr, thenBranch: Stmt, elseBranch: Stmt):
        self.condition = condition
        self.thenBranch = thenBranch
        self.elseBranch = elseBranch

    def accept(self, visitor: Any) -> Any:
        return visitor.visitIfStmt(self)

class Return(Stmt):
    def __init__(self, keyword: Token, value: Expr.Expr):
        self.keyword = keyword
        self.value = value

    def accept(self, visitor: Any) -> Any:
        return visitor.visitReturnStmt(self)

class While(Stmt):
    def __init__(self, condition: Expr.Expr, body: Stmt):
        self.condition = condition
        self.body = body

    def accept(self, visitor: Any) -> Any:
        return visitor.visitWhileStmt(self)

class Var(Stmt):
    def __init__(self, name: Token, initializer: Expr.Expr):
        self.name = name
        self.initializer = initializer

    def accept(self, visitor: Any) -> Any:
        return visitor.visitVarStmt(self)
